<?php

//$Id: userpoints.module,v 1.44.2.14.2.7 2007-09-09 20:28:24 jredding Exp $

// Copyright 2005-2007 Khalid Baheyeldin http://2bits.com

define('USERPOINTS_PERM_VIEW',           'view userpoints');
define('USERPOINTS_PERM_USE',            'use userpoints');
define('USERPOINTS_PERM_ADMIN',          'admin userpoints');

define('USERPOINTS_TRANS_UCPOINTS',      'userpoints_trans_ucpoints');
define('USERPOINTS_TRANS_LCPOINTS',      'userpoints_trans_lcpoints');
define('USERPOINTS_TRANS_LCPOINT',       'userpoints_trans_lcpoint');

define('USERPOINTS_STATUS',              'userpoints_status');

define('USERPOINTS_POINTS_MODERATION',    'userpoints_points_moderation');

define('USERPOINTS_TXN_STATUS_APPROVED',  0);
define('USERPOINTS_TXN_STATUS_PENDING',   1);
define('USERPOINTS_TXN_STATUS_DECLINED',  2);

define('USERPOINTS_PAGE_COUNT',           30);

define('USERPOINTS_EXPIRY_DESCRIPTION', 'userpoints_expiry_description');
define('USERPOINTS_EXPIREON_DATE', 'userpoints_expireon_date');
define('USERPOINTS_EXPIREAFTER_DATE', 'userpoints_expireafter_date');


/**
 * returns an array of common translation placeholders
 */
function userpoints_translation() {
  static $trans;
  
  if (!isset($trans)) {
    $trans = array(
      '!Points' => variable_get(USERPOINTS_TRANS_UCPOINTS, 'Points'),
      '!points' => variable_get(USERPOINTS_TRANS_LCPOINTS, 'points'),
      '!point'  => variable_get(USERPOINTS_TRANS_LCPOINT, 'point')
      );
  }
  return $trans;  
}

function userpoints_txn_status() {
  return array(
      USERPOINTS_TXN_STATUS_APPROVED => t('Approved'),
      USERPOINTS_TXN_STATUS_PENDING  => t('Pending'),
      USERPOINTS_TXN_STATUS_DECLINED => t('Declined'),
      );
}

/**
 * Implementation of hook_help().
 */
function userpoints_help($section) {
  switch ($section) {
    case 'admin/settings/userpoints':
      $output = t('Configure userpoints moderation and branding translation', userpoints_translation());
      break;
    case 'admin/help#userpoints':
      $output = t('Users earn !points as they post nodes, comments, and vote on nodes', userpoints_translation());
  }
  return $output;
}

/**
 * Implementation of hook_menu().
 */
function userpoints_menu($may_cache) {
  $items = array();

  if (!$may_cache) {
    $items[] = array(
      'path'     => 'userpoints',
      'callback' => 'userpoints_list_users',
      'title'    => t('users by !points', userpoints_translation()),
      'description' => t('List users by !points', userpoints_translation()),
      'access'   => user_access(USERPOINTS_PERM_VIEW),
      'type'     => MENU_NORMAL_ITEM,
    );
  
    $items[] = array(
      'path'     => 'admin/settings/userpoints',
      'callback' => 'drupal_get_form',
      'callback arguments' => array('userpoints_admin_settings'),
      'title'    => t('!Points settings', userpoints_translation()),
      'description' => t('Configure userpoints settings'),
      'access'   => user_access(USERPOINTS_PERM_ADMIN),
      'type'     => MENU_NORMAL_ITEM,
    );

    $items[] = array(
      'path'     => 'admin/user/userpoints',
      'callback' => 'userpoints_list_users',
      'title'    => t('!Points', userpoints_translation()),
      'description' => t('Manage !points', userpoints_translation()),
      'access'   => user_access(USERPOINTS_PERM_ADMIN),
    );
    $items[] = array(
      'path'     => 'admin/user/userpoints/list',
      'callback' => 'userpoints_list_users',
      'title'    => t('List'),
      'description' => t('List users by !points', userpoints_translation()),
      'access'   => user_access(USERPOINTS_PERM_VIEW),
      'type'     => MENU_DEFAULT_LOCAL_TASK,
      'weight'   => -2,
    );
    $items[] = array(
      'path'     => 'admin/user/userpoints/moderate',
      'callback' => 'userpoints_admin_manage',
      'title'    => t('Moderation'),
      'description' => t('Review !points in moderation', userpoints_translation()),
      'access'   => user_access(USERPOINTS_PERM_ADMIN),
      'type'     => MENU_LOCAL_TASK,
      'weight'   => -1,
    );
    $items[] = array(
      'path'     => 'admin/user/userpoints/add',
      'callback' => 'drupal_get_form',
      'callback arguments' => array('userpoints_admin_txn'),
      'title'    => t('Add'),
      'description' => t('Admin add/delete userpoints'),
      'access'   => user_access(USERPOINTS_PERM_ADMIN),
      'type'     => MENU_LOCAL_TASK,
      'weight'   => 0,
      );
    
    $items[] = array(
      'path'     => 'admin/user/userpoints/edit',
      'callback' => 'drupal_get_form',
      'callback arguments' => array('userpoints_admin_txn'),
      'access'   => user_access(USERPOINTS_PERM_ADMIN),
      'type'     => MENU_CALLBACK,
      );
  
    $items[] = array(
      'path'     => 'admin/user/userpoints/approve',
      'callback' => 'userpoints_admin_approve',
      'access'   => user_access(USERPOINTS_PERM_ADMIN),
      'type'     => MENU_CALLBACK,
    );
  
    $items[] = array(
      'path'     => 'admin/user/userpoints/decline',
      'callback' => 'userpoints_admin_approve',
      'access'   => user_access(USERPOINTS_PERM_ADMIN),
      'type'     => MENU_CALLBACK,
    );
  
  }
  
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function userpoints_perm() {
  return array(USERPOINTS_PERM_VIEW, USERPOINTS_PERM_USE, USERPOINTS_PERM_ADMIN);
}

/**
 * menu callback for settings form.
 */
function userpoints_admin_settings() {
  $form = array();
  $form['status'] = array(
    '#type' => 'fieldset',
    '#title' => t('Moderation'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => -1,
  );

  $form['status'][USERPOINTS_POINTS_MODERATION] = array(
    '#type'          => 'radios',
    '#title'         => t('Transaction status'),
    '#default_value' => variable_get(USERPOINTS_POINTS_MODERATION, 0),
    '#options'       => array(t('Approved'), t('Moderated')),
    '#description'   => t('Select whether all !points should be approved automatically, or moderated, and require admin approval', userpoints_translation()),
  );

  $group = 'renaming';
  $form[$group] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => t('Points branding'),
  );
  
  $form[$group][USERPOINTS_TRANS_UCPOINTS] = array(
  '#type' => 'textfield',
  '#title' => t('Word to use in the interface for the upper case plural word !Points', userpoints_translation()),
  '#default_value' => variable_get(USERPOINTS_TRANS_UCPOINTS, 'Points'),
  '#size' => 20,
  '#maxlength' => 20,
  );
  
  $form[$group][USERPOINTS_TRANS_LCPOINTS] = array(
  '#type' => 'textfield',
  '#title' => t('Word to use in the interface for the lower case plural word !points', userpoints_translation()),
  '#default_value' => variable_get(USERPOINTS_TRANS_LCPOINTS, 'points'),
  '#size' => 20,
  '#maxlength' => 20,
  );
  
  $form[$group][USERPOINTS_TRANS_LCPOINT] = array(
  '#type' => 'textfield',
  '#title' => t('Word to use in the interface for the lower case singular word !point', userpoints_translation()),
  '#default_value' => variable_get(USERPOINTS_TRANS_LCPOINT, 'point'),
  '#size' => 20,
  '#maxlength' => 20,
  );
  $group = "Points expiration";
  $form[$group] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => t('Points expiration'),
    '#description' =>t('These settings affect new points only, they are not retroactive'),
  );

  $form[$group][USERPOINTS_EXPIREAFTER_DATE] = array(
    '#type' => 'select',
    '#title' => t('Expire !points after',userpoints_translation()),
    '#description' => t('Once points have been obtained by the user 
                          they will expire according to this setting'),
    '#options' => expiry_dates(),
    '#default_value' => variable_get(USERPOINTS_EXPIREAFTER_DATE, NULL),
  );

    /*******************************************************
     * If the expiration date is earlier than today 
     * new points will last forever. Although this may be desirable
     * it could also be an oversight so we'll display a message
     * to the administrator
     ********************************************************
    */
  $warning="";
  if (
       userpoints_date_to_timestamp(
         variable_get(USERPOINTS_EXPIREON_DATE,
                      array('day'=> 1,'month'=>1,'year'=>1900)
                      )
       ) < time()
    ) {
    $warning = '<br /><strong>'. t('This setting will not take affect, date must be in the future') .'</strong>';
  }

  $form[$group][USERPOINTS_EXPIREON_DATE] = array(
    '#type' => 'date',
    '#title' => t('Expire !points on this date',userpoints_translation()),
    '#description' => t('Once points have been obtained by the user they will 
                         last until this date. This setting overrides the 
                         "Expire after setting" above'. $warning),
    '#default_value' => variable_get(USERPOINTS_EXPIREON_DATE, array('day'=> 1,'month'=>1,'year'=>1980)),
  );
  $form[$group][USERPOINTS_EXPIRY_DESCRIPTION] = array(
    '#type' => 'textarea',
    '#title' => t('Expiration entry description'),
    '#description' => t('A negating expiration entry is made to expire 
                         points leaving the original entry intact
                         (e.g. original points + expiration points = 0).
                         When the expiration entry is made this description will
                         be placed on the entry. This is useful so the users will
                         know what happened to their point balance. In crafting
                         your message you can use the following variables. 
                         <br /> %points = The name used in branding 
                         above (also use %Points and %point)
                         <br />%event = The original event that granted the points 
                         <br/> %description = Original description for the point 
                         <br /> %txn_id Original transaction ID 
                         <br /> %date = Date of the original entry'),
    '#default_value' => variable_get(USERPOINTS_EXPIRY_DESCRIPTION,''),
  );

  
  $form['setting'] = module_invoke_all('userpoints', 'setting');

  return system_settings_form($form);
}  

/**
 * @param uid: user id of the user to get or lose the points
 *
 * @return number of current points in that user's account
 */
function userpoints_get_current_points($uid = NULL) {
  if(!$uid) { 
    global $user;
    $uid = $user->uid;
  }
  return (int)db_result(db_query('SELECT points FROM {userpoints} WHERE uid = %d', $uid));
}

/**
 * @param $op
 *    An array of keyed variables and parameters  
 *    'points' => # of points (int) (required)
 *    'moderate' => TRUE/FALSE 
 *    'uid' => $user->uid 
 *    'event' => 'comment'
 *    'cid' => 'category ID' (not implemented)
 *    'expirydate' => timestamp or 0, 0 = non-expiring; NULL = site default
 *    'description' => 'description'
 *    'reference' => reserved module specific use
 *
 * @return FALSE when no action is take, TRUE when points are credited or debited
 */
function userpoints_userpointsapi($params = array()) {

  //Test for and set defaults
  if (!$params['uid']) {
    global $user;
    $params['uid'] = $user->uid;
  }
  if (!$params['event']){
    $params['event'] = NULL;
  }
  if (!$params['description']) {
    $params['description'] = NULL;
  }
  if (!$params['reference']) {
    $params['reference'] = NULL;
  }
  if (!$params['moderation']) {
    $params['moderation'] = variable_get(USERPOINTS_POINTS_MODERATION, FALSE);
  }

  // anonymous users do not get points, and there have to be points to process
  if ($params['uid'] == 0 || $params['points'] == 0) {
    return FALSE;
  }

  // Load the user
  $account = user_load(array('uid' => $params['uid']));
  
  // Call the _userpoints hook, and stop if one of them returns FALSE
  // This will be handy later
  $rc = module_invoke_all('userpoints', 'points before', $params['points'], $account->uid, $params['event']);

  foreach ($rc as $key => $value) {
    if ($value == FALSE) {
      // Do not process the points
      return FALSE;
    }
  }
  
  if ($params['points'] < 0) {
    $msg = t('lost');
  }
  else {
    $msg = t('earned');
  }


  _userpoints_transaction($params);

  if ($moderation) {
    drupal_set_message(t('User %uname %op %pointsvalue !points, pending administrator approval.',
      array_merge(userpoints_translation(), array(
        '%uname'  => $account->name,
        '%op'     => $msg,
        '%pointsvalue' => abs($params['points']),
        '%total'  => $current_points)
        )));
    return TRUE;
  }

  // If the points are pre-approved, then just write the trail
  if ($params['op'] == 'points approved') {
    $params['moderation'] = FALSE;
    _userpoints_transaction($params);
  }


  // ***********************
  // At this point, regardless of what $op is, the module needs to
  // actually award the points. (Keep in mind that if $op was 'point' and
  // moderation was on, then it won't get to this part).
  // ***********************

  // Calculate the current point
  $current_points = (int)$params['points'] + userpoints_get_current_points($params['uid']);

  // Check if user has earned points
  if ($params['points'] > 0) {
    // Set the max_points to be the current max points, plus whatever earned in this transaction
    $max_points = db_result(db_query('SELECT max_points FROM {userpoints} WHERE uid = %d', $params['uid']));
    $max_points = $current_points + (int)$max_points;
  }

  drupal_set_message(t('User %uname %op %pointsvalue !points! Total now is %total points.',
    array_merge(userpoints_translation(), array(
      '%uname'  => $account->name,
      '%op'     => $msg,
      '%pointsvalue' => abs($params['points']),
      '%total'  => $current_points)
      )));

  if (_userpoints_user_exists($params['uid'])) {
    db_query("UPDATE {userpoints}
      SET points = %d, max_points = %d, last_update = %d WHERE uid = %d",
      $current_points,
      $max_points,
      time(),
      $params['uid']);
  }
  else {
    $result = db_query("INSERT INTO {userpoints}
      VALUES (%d, %d, %d, %d)",
      $params['uid'],
      $current_points,
      $max_points,
      time());
  }
  module_invoke_all('userpoints', 'points after', $params['points'], $account->uid, $params['event']);

  return TRUE;
}

/* Purpose: Determines the correct default expiration date
 * Returns: timestamp
*/
function userpoints_get_default_expiry_date(){
  $expirydate=userpoints_date_to_timestamp(variable_get(USERPOINTS_EXPIREON_DATE,NULL));
  if($expirydate < time()) {
    $expirydate = variable_get(USERPOINTS_EXPIREAFTER_DATE, NULL);
    if ($expirydate) { 
       $expirydate = time() + $expirydate; 
    }
  }
  return $expirydate;
} //userpoints_get_default_expiry_date



/*
 * Adds the points to the txn table
*/
function _userpoints_transaction($params) {
  global $user;
  if (!$params['uid']) { $params['uid'] = $user->uid; }
  if (!$params['points']) { $params['points'] = 0; }
  if (!$params['moderation']) { $params['moderation'] = 0; }
  if (!$params['description']) { $params['description'] = NULL; }
  if (!$params['expirydate']) { $params['expirydate'] = NULL; }
  if (!$params['expired']) { $params['expired'] = NULL; }
  if (!$params['parent_txn_id']) { $params['parent_txn_id'] = NULL; }
  if (!$params['event']) { $params['event'] = NULL; }
  if (!$params['reference']) { $params['reference'] = NULL; }

  db_query("INSERT INTO {userpoints_txn}
    (uid, points, time_stamp, status, event, description, 
    reference, expirydate, expired, parent_txn_id)
    VALUES (%d, %d, %d, %d, '%s', '%s', '%s', %d, %d, %d)",
    $params['uid'],
    $params['points'],
    time(),
    $params['moderation'],
    $params['event'],
    $params['description'],
    $params['reference'],
    $params['expirydate'],
    $params['expired'], 
    $params['parent_txn_id']
    );
  return $moderation;
}

function _userpoints_user_exists($uid) {
  return (int)db_result(db_query('SELECT COUNT(*) FROM {userpoints} WHERE uid = %d', $uid));
}

function userpoints_user($op, &$edit, &$account, $category = '') {
  switch ($op) {
    case 'delete':
      // The user is being deleted, delete all traces in userpoints and txn tables
      db_query('DELETE FROM {userpoints} WHERE uid = %d', $account->uid);
      db_query('DELETE FROM {userpoints_txn} WHERE uid = %d', $account->uid);
      break;

    case 'view':
      // Get the points for the user
      $points = userpoints_get_current_points($account->uid);
      if (user_access(USERPOINTS_PERM_ADMIN)) {
        $points = l($points, 'admin/user/userpoints/add/'. $account->uid, array('title' => t('Manage points')));
      }
      $disp_points[] = array(
        'title' => t('User !points', userpoints_translation()),
        'value' => $points,
        );
      return array(t('!Points', userpoints_translation()) => $disp_points);
      break;
  }
}

function userpoints_admin_manage() {
  $header = array(
    array('data' => t('User'), 'field' => 'uid', 'sort' => 'desc'),
    array('data' => t('Time stamp'), 'field' => 'time_stamp'),
    array('data' => t('!Points', userpoints_translation()), 'field' => 'points'),
    array('data' => t('Event'), 'field' => 'event'),
    array('data' => t('Operation', userpoints_translation())),
  );

  $sql = "SELECT t.txn_id, t.uid, t.time_stamp, t.points, t.event, t.status FROM {userpoints_txn} t WHERE t.status = %d";

  $sql .= tablesort_sql($header);
  $result = pager_query($sql, USERPOINTS_PAGE_COUNT, 0, NULL, USERPOINTS_TXN_STATUS_PENDING);
    while ($data = db_fetch_object($result)) {
      $user = user_load(array('uid' => $data->uid));
      $rows[] = array(
        array('data' => theme('username', $user)),
        array('data' => format_date($data->time_stamp, 'custom', 'Y-m-d H:i')),
        array('data' => $data->points, 'align' => 'right'),
        array('data' => $data->event),
        array('data' => l('approve', "admin/user/userpoints/approve/$data->txn_id") .
                  ' '. l('decline', "admin/user/userpoints/decline/$data->txn_id") .
                  ' '. l('edit',    "admin/user/userpoints/edit/$data->txn_id")
             ),
      );
    }
  if (!$rows) {
    //no points in moderation
    $rows[] = array(array('data' => t('No !points awaiting moderation', userpoints_translation()), 
                          'colspan' => 5, 'align' => 'center')
                    ); //$rows[]
  }

  $output = theme('table', $header, $rows);
  $output .= theme('pager', NULL, 30, 0);

  return $output;
}

function userpoints_admin_approve() {
  global $user;
  $op = arg(3);
  $txn_id = (int)arg(4);
  if ($txn_id) {
    switch ($op) {
      case 'approve':
        $result = db_query("SELECT uid, event, points, description, reference
          FROM {userpoints_txn}
          WHERE status = %d AND txn_id = %d",
          USERPOINTS_TXN_STATUS_PENDING, $txn_id);
        $data = db_fetch_object($result);
        drupal_set_message(t('Transaction approved'));
        // This transaction has not been credited to the user's account, so credit it first
        $params = array(
                    'op' => 'txn approve',
                    'points' => $data->points,
                    'uid' => $data->uid,
                    'event' => $data->event,
                    'description' => $data->description,
                    'reference' => $data->reference
                  );
        userpoints_userpointsapi($params);
        // Set it to approved
        db_query("UPDATE {userpoints_txn}
          SET status = %d, approver_uid = %d WHERE txn_id = %d",
          USERPOINTS_TXN_STATUS_APPROVED,
          $user->uid,
          $txn_id);
        break;
      case 'decline':
        db_query("UPDATE {userpoints_txn}
          SET status = %d, approver_uid = %d  WHERE txn_id = %d",
          USERPOINTS_TXN_STATUS_DECLINED,
          $user->uid,
          $txn_id);
        drupal_set_message(t('Transaction declined'));
        break;
    }
  }
  drupal_goto('admin/user/userpoints');
}

function userpoints_admin_txn() {
  global $user;

  $mode = arg(3);
  $txn_id = (int)arg(4);
  
  $timestamp = format_date(time(), 'custom', 'Y-m-d H:i O');

  if ($mode == 'edit' && $txn_id) {
    $result = db_query('SELECT * FROM {userpoints_txn} WHERE txn_id = %d', $txn_id);
    $txn = db_fetch_object($result);
    $timestamp = format_date($txn->time_stamp, 'custom', 'Y-m-d H:i O');
    $txn_user = user_load(array('uid' => $txn->uid));
  }

  $form['txn_user'] = array(
    '#type'          => 'textfield',
    '#title'         => t('User Name'),
    '#size'          => 30,
    '#maxlength'     => 60,
    '#default_value' => $txn_user->name,
    '#autocomplete_path' => 'user/autocomplete',
    '#description'   => t('Drupal User Name for the user you want the points to affect'),
    );

  $form['points'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Points'),
    '#size'          => 10,
    '#maxlength'     => 10,
    '#default_value' => $txn->points,
    '#description'   => t('Number of points to add/subtract from the user. For example, 25 (to add points) or -25 (to subtract points).'),
    );

  $form['time_stamp'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Date/Time'),
    '#default_value' => $timestamp,
    '#size'          => 30,
    '#maxlength'     => 30,
    '#description'   => t('Date and time of this transaction, in the form YYYY-MM-DD HH:MM +ZZZZ'),
    );  
  $expirydate = userpoints_get_default_expiry_date();
  if ($expirydate) {
    $expirydate = format_date($expirydate, 'custom', 'Y-m-d H:i O');
  }
  $form['expirydate'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Expiration date'),
    '#default_value' => $expirydate,
    '#size'          => 30,
    '#maxlength'     => 30,
    '#description'   => t('Date and time to expire these points, in the form YYYY-MM-DD HH:MM +ZZZZ').
                        '<br>'. t('Leave blank for non-expiring points'),
  );

  $form['description'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Description'),
    '#default_value' => $txn->description,
    '#width'         => 70,
    '#lines'         => 5,
    '#description'   => t('Enter an optional description for this transaction, such as the reason it is created.'),
    );

  $form['reference'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Reference'),
    '#default_value' => $txn->reference,
    '#size'          => 30,
    '#maxlength'     => 128,
    '#description'   => t('Enter optional reference for this transaction. This field will be indexed and searchable.'),
    ); 

  switch ($mode) {
    case 'add':
      $form['approver_uid'] = array(
        '#type'  => 'hidden',
        '#value' => $user->uid,
        );

      $form['event'] = array(
        '#type'  => 'hidden',
        '#value' => 'admin',
        );

      $form['status'] = array(
        '#type'  => 'hidden',
        '#value' => USERPOINTS_TXN_STATUS_PENDING,
        );

      $form['mode'] = array(
        '#type'  => 'hidden',
        '#value' => $mode,
        );
      break;

   case 'edit':
     
     $form['txn_user']['#disabled'] = true;
     unset($form['txn_user']['#autocomplete_path']);

     $form['txn_uid'] = array(
       '#type'  => 'value',
       '#value' => $txn->uid,
       );
     $form['txn_id'] = array(
       '#type'  => 'value',
       '#value' => $txn_id,
       );
     $form['approver_uid'] = array(
       '#type'  => 'textfield',
       '#description' => t('Approver ID'),
       '#default_value' => $txn->approver_uid,
       '#size'          => 10,
       '#maxlength'     => 7,
       '#description'   => t('The user ID of the person who approved this transaction. 0 means not yet approved.'),
       );

      $form['event'] = array(
        '#type'  => 'textfield',
        '#description' => t('Event'),
        '#default_value' => $txn->event,
        '#size'          => 20,
        '#maxlength'     => 20,
        '#description'   => t('The event type for this transaction. Normally, it is "admin".'),
        );

      $form['status'] = array(
        '#title' => t('Approval status'),
        '#type' => 'radios', 
        '#options' => userpoints_txn_status(), 
        '#description' => t('Approval status of the transaction.'),
        '#default_value' => $txn->status,
        );
      break;
  }

  $form['mode'] = array(
      '#type'  => 'hidden',
      '#default_value' => $mode
      );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    );

  return $form;
}

function userpoints_admin_txn_submit($form_id, $form = NULL) {
  if ($form_id != 'userpoints_admin_txn') {
    return;
  }

  $txn_user = user_load(array('name' => $form['txn_user']));
  switch ($form['mode']) {
    case 'add':
      $params = array(
                  'op' => 'points',
                  'points' => $form['points'],
                  'uid' => $txn_user->uid,
                  'event' => 'admin',
                  'description' => $form['description'],
                  'reference' => $form['reference'],
                  'expirydate' => strtotime($form['expirydate']),
                );
      userpoints_userpointsapi($params);
      break;
      
    case 'edit':
      db_query("UPDATE {userpoints_txn} 
                SET uid = %d, approver_uid = %d, points = %d, time_stamp = %d, 
                    event = '%s', description = '%s', reference = '%s', 
                    status = %d, expirydate = %d
                WHERE txn_id = %d",
        $form['txn_uid'],
        $form['approver_uid'],
        $form['points'],
        strtotime($form['time_stamp']),
        $form['event'],
        $form['description'],
        $form['reference'],
        $form['status'],
        strtotime($form['expirydate']),
        $form['txn_id']
      ); //db_query
      drupal_set_message("--".$form['txn_id']. t('Transaction has been updated.'));
  }
  
  drupal_goto('admin/user/userpoints');
}

function userpoints_list_users() {
  $sql = "SELECT p.uid, u.name, p.points
    FROM {userpoints} p INNER JOIN {users} u USING (uid)";
  $sql_cnt = "SELECT COUNT(DISTINCT(uid)) FROM {userpoints}";
  $header = array(
    array('data' => t('User'), 'field' => 'u.name'),
    array('data' => t('!Points', userpoints_translation()), 'field' => 'p.points', 'sort' => 'desc'),
  );
  $sql .= tablesort_sql($header);
  $result = pager_query($sql, 30, 0, $sql_cnt);
  while ($data = db_fetch_object($result)) {
    $rows[] = array(
      array('data' => theme('username', $data)),
      array('data' => $data->points, 'align' => 'right'),
    );
  }

  $output = theme('table', $header, $rows);
  $output .= theme('pager', NULL, 30, 0);

  return $output;
}

function userpoints_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;

  $num = 5;

  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('User\'s !points', userpoints_translation());
      $blocks[1]['info'] = t('Highest Users');
      return $blocks;

    case 'view':
      if (user_access(USERPOINTS_PERM_VIEW)) {
        switch ($delta) {
          case 0:
            $title = t('@user\'s !points', array_merge(array('@user' => $user->name), userpoints_translation()));;
            if ($user->uid) {
              $points = (int) db_result(db_query('SELECT points FROM {userpoints} WHERE uid = %d', $user->uid));
              $show_points = format_plural($points, t('!point', userpoints_translation()), t('!points', userpoints_translation()));
              $content = t('You have %p %c', array('%p' => $points, '%c' => $show_points));
            }
            else {
              $content = t('!Points are visible to logged in users only', userpoints_translation());
            }
            break;

          case 1:
            $title = t('Highest Users');
            $result = db_query_range('SELECT p.uid, u.name, p.points
              FROM {userpoints} p INNER JOIN {users} u USING (uid)
              ORDER BY p.points DESC', 0, $num);
            while ($data = db_fetch_object($result)) {
              $rows[] =
                array(
                  array('data' => theme('username', $data)),
                  array('data' => $data->points, 'align' => 'right'));
            }
            $header = array(t('User'), t('!Points', userpoints_translation()));
            $content = theme('table', $header, $rows);
            $content .= '<div class="more-link">'. l(t('more'), 'userpoints', array('title' => t('All users by !points', userpoints_translation()))) .'</div>';
            break;
        }

        $block['subject'] = $title;
        $block['content'] = $content;

        return $block;
      }
  }
}
/*
 * returns an array of possible expiry time
 * to the administrative settings page
*/
function expiry_dates() {
  return array(
  NULL     => 'Never',
  3600     => 'One hour',
  86400    => 'One Day',
  604800   => 'One Week',
  1209600  => 'Two Weeks',
  2419200  => 'Four Weeks',
  31536000 => '365 Days',
  );
} //expiry_dates 

/* userpoints_date_to_timestamp
 * Purpose: modifies FAPI date setting to timestamp 
 * Returns UNIX timestamp
*/
function userpoints_date_to_timestamp($date) {
  //This takes the FAPI date form array and returns a timestamp
  if ($date) {
    return mktime(0,0,0,$date['month'],$date['day'],$date['year']);
  }
}

/*
* Purpose: Finds all transactions with a expirydate < time() and posts 
*          opposite transactions (sum of 0)
*/
function userpoints_expire_transactions(){
  $sql = "SELECT txn_id, uid, points, time_stamp, event, description 
          FROM {userpoints_txn} 
          WHERE status = 0 AND expired = 0 
          AND (expirydate < %d AND expirydate != 0)"; 
  $results = db_query($sql, time());
  while($line = db_fetch_array($results)){
    $line['time_stamp'] = format_date($line['time_stamp'], 'custom', 'Y-m-d H:i'); 
    $description = t(variable_get(USERPOINTS_EXPIRY_DESCRIPTION,NULL), 
                     array_merge(userpoints_translation(), 
                                 array('!event'=>$line['event'], 
                                       '!description'=> $line['description'], 
                                       '!txn_id' => $line['txn_id'], 
                                       '!date' => $line['time_stamp']
                                       )
                                 )
                     ); //$description

    $params = array(
                'op' => 'points',
                'points' => -$line['points'],
                'uid' => $line['uid'],
                'event' => 'expiry',
                'description' => $description,
                'parent_txn_id' => $line['txn_id'],
              );
    userpoints_userpointsapi($params);
    //Ok we've expired the entry lets update the original entry to set the expired flag
    $update_sql = 'UPDATE {userpoints_txn} SET expired=1 WHERE txn_id = %d';
    db_query($update_sql, $line['txn_id']); 
  }
} //userpoints_expire_transactions

function userpoints_cron(){
  userpoints_expire_transactions();
}
