<?php

//$Id: userpoints_basic.module,v 1.3.2.5.2.4 2007-10-23 16:57:59 jredding Exp $

// Copyright 2005 Khalid Baheyeldin http://2bits.com

define('USERPOINTS_POST',                'userpoints_post_');
define('USERPOINTS_POST_COMMENT',        'userpoints_post_comment');
define('USERPOINTS_MODERATE_COMMENT',    'userpoints_moderate_comment');

function userpoints_basic_help($section) {
  switch ($section) {
    case 'admin/settings/userpoints_basic':
      $output = t('<strong>UP:</strong> Some basic interfaces for userpoints, such as posting nodes, comments, ...etc.');
      break;
  }
  return $output;
}

function userpoints_basic_userpoints($op, $points = 0, $uid = 0, $event = '') {
  switch($op) {
    case 'setting':
      $group = 'basic';
      $form[$group] = array(
        '#type'        => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed'   => TRUE,
        '#title'       => t('!Points for basic events', userpoints_translation()),
      );
      
      foreach(node_get_types() as $type => $name) {
        $form[$group][USERPOINTS_POST. $type] = array(
          '#type'          => 'textfield',
          '#title'         => t('!Points for posting a !node-name', array_merge(userpoints_translation(), array('!node-name' => $name->name))),
          '#default_value' => variable_get(USERPOINTS_POST. $type, '0'),
          '#size'          => 5,
          '#maxlength'     => 5,
          );
      }

      $form[$group][USERPOINTS_POST_COMMENT] = array(
        '#type'          => 'textfield',
        '#title'         => t('!Points for posting a comment', userpoints_translation()),
        '#default_value' => variable_get(USERPOINTS_POST_COMMENT, 0),
        '#size'          => 5,
        '#maxlength'     => 5,
        );

      $form[$group][USERPOINTS_MODERATE_COMMENT] = array(
        '#type'          => 'textfield',
        '#title'         => t('!Points for moderating a comment', userpoints_translation()),
        '#default_value' => variable_get(USERPOINTS_MODERATE_COMMENT, 0),
        '#size'          => 5,
        '#maxlength'     => 5,
        );

      return $form;
      break;
  }
}
  
function userpoints_nodeapi(&$node, $op, $teaser, $page) {
  static $up_orig_uid;
  $points = variable_get(USERPOINTS_POST . $node->type, 0);
  switch($op) {
    case 'insert':
      $params = array(
        'points' => $points,
        'uid' => $node->uid,
        'event' => $node->type,
      );
      userpoints_userpointsapi($params);
      break;
    case 'delete':
      $points = -$points;
      $params = array(
        'points' => $points,
        'uid' => $node->uid,
        'event' => $node->type,
      );
      userpoints_userpointsapi($params);
      break;
    case 'prepare':
      $up_orig_uid = $node->uid;
      break;
    case 'update':
      //!!!!!THE CODE BELOW MIGHT BE CAUSING A BUG
      //On clean installs of Drupal it works fine
      //on certain installs it takes away points
      //from the rightfull owner (when ownership hasn't changed)
      //http://drupal.org/node/183520
      if ($node->uid != $up_orig_uid && is_numeric($up_orig_uid)) {
        // Add to the new node owner
        $params = array(
          'points' => $points,
          'uid' => $node->uid,
          'event' => $node->type,
        );
        userpoints_userpointsapi($params);

        // subtract from the original node owner
        $params = array(
          'points' => -$points,
          'uid' => $up_orig_uid,
          'event' => $node->type,
        );
        userpoints_userpointsapi($params);
        unset($up_orig_uid);
      }
      break;
  }
}

function userpoints_comment($comment, $op) {
  global $user;
  static $up_orig_uid;

  $points = variable_get(USERPOINTS_POST_COMMENT, 0);
  switch($op) {
    case 'insert':
      $params = array(
        'points' => $points,
        'uid' => $user->uid,
        'event' => 'post comment',
      );
      userpoints_userpointsapi($params);
      break;
    case 'delete':
      $points = -$points;
      $params = array(
        'points' => $points,
        'uid' => $comment->uid,
        'event' => 'post comment',
      );
      userpoints_userpointsapi($params);
      break;
    case 'moderate':
      $points = variable_get(USERPOINTS_MODERATE_COMMENT, 0);
      $params = array(
        'points' => $points,
        'uid' => $comment->uid,
        'event' => 'moderate comment',
      );
      userpoints_userpointsapi($params);
      break;
    case 'form':
      $up_orig_uid = $comment['uid']['#value'];
    case 'update':
      $new_uid = $comment['uid']['#value'];
      //!!!!!THE CODE BELOW MIGHT BE CAUSING A BUG
      //On clean installs of Drupal it works fine
      //on certain installs it takes away points
      //from the rightfull owner (when ownership hasn't changed)
      //http://drupal.org/node/183520
      if ($up_orig_uid != $new_uid && is_numeric($up_orig_uid)) {
        //The owner has changed so we're removing from the
        //the original owner and giving to the new owner
        //Give to the original owner
        $params = array(
          'points' => $points,
          'uid' => $new_uid,
          'event' => 'post comment',
        );
        userpoints_userpointsapi($params);

        //Take away from the original owner
        $params = array(
          'points' => -$points,
          'uid' => $up_orig_uid,
          'event' => 'post comment',
        );
        userpoints_userpointsapi($params);

        //As the $up_orig_uid has served its purposes lets unset it
        unset($up_orig_uid);
      }
      break;
  }
}

